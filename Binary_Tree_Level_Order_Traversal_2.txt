Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7

return its bottom-up level order traversal as:

[
  [15,7]
  [9,20],
  [3],
]
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void reverse(vector<vector<int> > &lists){
        int size = lists.size();
        for (int i=0; i<size/2; ++i){
            vector<int> temp;
            temp=lists[i];
            lists[i] = lists[size-1-i];
            lists[size-1-i] = temp;
            }
    }
    vector<vector<int> > levelOrderBottom(TreeNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        vector<vector<int> > lists;
        queue<TreeNode *> current;
        if (root!=NULL) current.push(root);
        while(!current.empty()){
            vector<int> list;
            int size = current.size();
            for (int i=0; i<size; ++i){
                TreeNode *node = current.front();
                list.push_back(node->val);
                current.pop();
                if (node->left) current.push(node->left);
                if (node->right) current.push(node->right);
            }
            lists.push_back(list);
        }
        reverse(lists);
        return lists;
    }
};
REMARK:
1 IDEA: We use the nearly the same code as in the "Binary Tree Level Order Traversal". Only difference is we reverse the vector lists at the final step. 
2.Note, how to reverse a vector(or string, array) without using extra space? Easy, just refer to the code.
