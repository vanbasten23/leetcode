Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \      \
        7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (root==NULL) return false;
        sum = sum - root->val;
        if (sum==0&&root->left==NULL&&root->right==NULL) return true;
        return hasPathSum(root->left,sum)||hasPathSum(root->right,sum);
    }
};

Another solution:
class Solution {
public:
    bool hasPathSum(TreeNode *root, int sum) {
        if(!root)  return false;
        else if(!root->left && !root->right){
            if(sum==root->val)  return true;
            else  return false;
        }
        sum -= root->val;
        if(hasPathSum(root->left, sum))  return true;
        if(hasPathSum(root->right, sum))  return true;
        return false;
    }
};

REMARK:
1. Don't need to create another function, i.e. hasPathSumHelper(). Don't need to create another variable sum2 = summation of the node value and compare it with sum. Simply do sum -= root->val and compare it with 0. Also note the path is root-to-leaf instead of root-to-any-node.
2.Time O(n) since the worst case senario is to loop through all the nodes.
