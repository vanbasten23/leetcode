/*
Unique Paths II 
Follow up for "Unique Paths":

Now consider if some obstacles are added to the grids. How many unique paths would there be?

An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.

[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
The total number of unique paths is 2.

Note: m and n will be at most 100.
*/

class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
    	int m=obstacleGrid.size(), n=obstacleGrid[0].size();
    	if (obstacleGrid[m-1][n-1]==1||obstacleGrid[0][0]==1) return 0;
        int numpaths[m][n];
        for (int i=0; i<n; ++i)
        {
		  if (obstacleGrid[0][i]==1)
		  {
		    for (int j=i; j<n; ++j) numpaths[0][j]=0;
		    break;
		  }
          numpaths[0][i]=1;
        }
        for (int i=0; i<m; ++i)
        {
          if(obstacleGrid[i][0]==1)
          {
            for (int j=i; j<m; ++j) numpaths[j][0]=0;
            break;
          }
          numpaths[i][0]=1;
        }
        for (int i=1; i<m; ++i)
        {
          for (int j=1; j<n; ++j)
          {
            if (obstacleGrid[i][j]==1) {numpaths[i][j]=0;continue;}
            if (numpaths[i-1][j]==0) numpaths[i][j]=numpaths[i][j-1];
            else if (numpaths[i][j-1]==0) numpaths[i][j]=numpaths[i-1][j];
            else numpaths[i][j]=numpaths[i-1][j]+numpaths[i][j-1];
          }
        }
        return numpaths[m-1][n-1];
    }
};


REMARK:
1. IDEA: Based on the original problem Unique_Paths. We build the same m*n array to denote the number of unique paths for each position. 
2. A slightly better version. Same idea, slightly different implementation.(http://yucoding.blogspot.com/2013/04/leetcode-question-117-unique-path-ii.html)
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int> > &obstacleGrid) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
         
        vector<vector<int> > arr(m,vector<int>(n,0));
         
        if (obstacleGrid[0][0]==1){return 0;}
        arr[0][0]=1;
        for (int i=1;i<m;i++){
            if (obstacleGrid[i][0]!=1){
                arr[i][0] = arr[i-1][0];
            }
        }
        for (int i=1;i<n;i++){
            if (obstacleGrid[0][i]!=1){
                arr[0][i] = arr[0][i-1];
            }
        }
        for (int i=1;i<m;i++){
            for(int j=1;j<n;j++){
                if (obstacleGrid[i][j]!=1){
                    arr[i][j] = arr[i][j-1] + arr[i-1][j];
                }
            }
        }   
        return arr[m-1][n-1];
    }
};




