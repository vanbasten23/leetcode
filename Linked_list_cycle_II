/*
Linked List Cycle II
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
      if (head==NULL) return NULL;
      ListNode *slow=head, *fast=head;
      while(true)
      {
        if (fast==NULL||fast->next==NULL) return NULL;
	else{slow=slow->next;fast=fast->next->next;}
	if (slow==fast) break;
      }
      slow=head;
      while(slow!=fast)
      {
	slow=slow->next;
	fast=fast->next;
      }
      return slow;
    }
};

REMARK:
1. So hard. 
