/*
Scramble String
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
*/

class Solution {
public:
    bool isScramble(string s1, string s2) {
      //base case
      if (s1.size()!=s2.size()) return false;
      //numletter is a int array of size 26 that records the number of each letter. Next step: check if the letters in s1 and s2 are the same
      int numletter[26];
      memset(numletter,0,26*sizeof(int));
      for (int i=0; i<s1.size(); ++i)
      	numletter[s1[i]-'a']++;
      for (int i=0; i<s2.size(); ++i)
      	numletter[s2[i]-'a']--;
      for (int i=0; i<26; ++i)
      	if (numletter[i]!=0) return false;
      if (s1.size()==1) return true;
      //recursion starts here
      for (int i=1; i<=s1.size()-1; ++i)
      {
        bool a=isScramble(s1.substr(0,i),s2.substr(0,i))&&isScramble(s1.substr(i),s2.substr(i));
        bool b=isScramble(s1.substr(0,i),s2.substr(s2.size()-i))&&isScramble(s1.substr(i,s1.size()-i),s2.substr(0,s2.size()-i));
        if (a||b) return true;
      }
      return false;
    }
};


REMARK:
1. Have no idea. So hard.
IDEA: The key is: Assume s1 and s2 are two strings; s1 can be divided into 2 substrings: s11 and s12(means s11 concatenated with s12 form s1 ); similarly s2 can be divided into 2 substrings:s21 and s22, then we have:
s1 is a scrambled string of s2 if and only if one of the statement below holds:
(1) s11 is a scrambled string of s21 and s12 is a scrambled string of s22
(2) s11 is a scrambled string of s22 and s12 is a scrambled string of s21
2. Detail: 
(1) One of the trickiest implementation detail is at line 60
        bool b=isScramble(s1.substr(0,i),s2.substr(s2.size()-i))&&isScramble(s1.substr(i,s1.size()-i),s2.substr(0,s2.size()-i));
It's hard to figure out the correct index using string::substr. So error-prone.
About string::substr refer to the end of this document.
(2) In order to use memset() at line 48, you have to declare the array first like we did at line47.



Reference:
string::substr: Example:
std::string str="abcdefg";
cout<<str.substr(0,2)<<" "<<str.substr(2)<<endl;

Output: ab cdefg
