/*
Maximum Depth of Binary Tree

Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
*/

/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	int maxHeight=1;
	void helper(TreeNode *root, int h)
	{
	  if (!root)
	  { 
	    if (h>maxHeight) maxHeight=h;
	    return;
	  }
	  helper(root->left,h+1);
	  helper(root->right,h+1); 
	}

    int maxDepth(TreeNode *root) {
      if (!root)  return 0;
      int h=0;
      helper(root,h);
      return maxHeight;
    }
};

REMARK:
1. Easy one. Just the normal way to deal with tree: create a recursive helper function within the main function maxDepth(TreeNode *root). In the helper function, first write stop condition and then the recursion. That's it.
2. However, after I see yu zhu's solution, his solution is much much better. He uses depth first search, then bang!
class Solution {
public:
    int maxDepth(TreeNode *root) {
      if (!root)  return 0;
      else return 1+max(maxDepth(root->left),maxDepth(root->right));
    }
};