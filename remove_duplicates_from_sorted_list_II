/*
Remove Duplicates from Sorted List II
Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list.

For example,
Given 1->2->3->3->4->4->5, return 1->2->5.
Given 1->1->1->2->3, return 2->3.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) {
    if (head==NULL||head->next==NULL) return head;
    //define a dummyHead to avoid the case: 1->1->2->NULL
    ListNode *dummyHead = new ListNode(0);
    dummyHead->next=head;
    ListNode *p=head,*last=dummyHead;//p is used to walk through the list and last is used to denote the last un-duplicate number
    while(p!=NULL&&p->next!=NULL)
    {
        if (p->val==p->next->val)
        {
            while(p->next!=NULL&&p->val==p->next->val)
            {
                p=p->next;
            }
            p=p->next;
            last->next=p;
        }
        else
        {
            last=p;
            p=p->next;
        }
    }
    return dummyHead->next;
}
};

REMARK:
1.HARD one.Idea is easy, just walk through the list. However there is one tough case as below.
2.One tough case is this: e.g.   head->1->1->NULL  or head->1->1->2->3->NULL. Inthis case we should change the head pointer. This makes the problem harder. Solution: create a dummyHead in front of the true head. BANG!  
4. Time complexity: O(n), space:O(1)
5. Another similar version:
ListNode *deleteDuplicates(ListNode *head) {
    if (head==NULL||head->next==NULL) return head;
    //define a dummyHead to avoid the case: 1->1->2->NULL
    ListNode *dummyHead = new ListNode(0);
    dummyHead->next=head;
    ListNode *p=head,*last=dummyHead;//p is used to walk through the list and last is used to denote the last un-duplicate number
    while(p!=NULL&&p->next!=NULL)
    {
        while(p->next!=NULL&&p->val==p->next->val){
            p=p->next;
        }
        if (last->next!=p){
            last->next=p->next;
            p=p->next;
        }
        else{
            last=p;
            p=p->next;
        }
    }
    return dummyHead->next;
}