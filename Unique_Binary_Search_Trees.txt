Given n, how many structurally unique BST's (binary search trees) that store values 1...n?

For example,
Given n = 3, there are a total of 5 unique BST's.

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3



class Solution {
public:
    int numTrees(int n) {
        //vec[n] counts the number of unique BST with n nodes.
        vector<int> vec(n+1,0);
        vec[0]=1;
        vec[1]=1;
        for(int i=2; i<=n; ++i){
            for (int j=0; j<i; ++j){
                vec[i] += vec[j]*vec[i-j-1];
            }
        }
        return vec[n];
    }
};


REMARK:
1. IDEA: use DP(dynamic programming) to solve it, that is, for example:
Count[n] counts the number of unique BST with n nodes.
Count[3] = Count[0]*Count[2]  (1 is the root)
         + Count[1]*Count[1]  (2 is the root)
         + Count[2]*Count[0]  (3 is the root)

2. However, the index issue can be annoying.
