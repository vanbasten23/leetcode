Follow up for problem "Populating Next Right Pointers in Each Node".

What if the given tree could be any binary tree? Would your previous solution still work?

Note:

You may only use constant extra space.
For example,
Given the following binary tree,

         1
       /  \
      2    3
     / \    \
    4   5    7
After calling your function, the tree should look like:

         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \    \
    4-> 5 -> 7 -> NULL

/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (root==NULL) return;
        queue<TreeLinkNode *> list;
        list.push(root);
        while(!list.empty()){
            int size = list.size();
            for (int i=0; i<size; ++i){
                TreeLinkNode *node = list.front();
                list.pop();
                if (i<size-1)
                    node->next=list.front();
                if (node->left) list.push(node->left);
                if (node->right) list.push(node->right);
            }   
        }
    }
};

1. Exactly the same as the original problem "Populating Next Right Pointers in Each Node".
