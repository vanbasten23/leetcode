/*
Problem: Remove Duplicates from Sorted List
Given a sorted linked list, delete all duplicates such that each element appear only once.

For example,
Given 1->1->2, return 1->2.
Given 1->1->2->3->3, return 1->2->3.
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *deleteDuplicates(ListNode *head) 
    {
        if (head==NULL||head->next==NULL) return head;
	ListNode *ptr=head;
	while(ptr->next!=NULL)
	{
	  if (ptr->val==ptr->next->val)
	  {
	    ptr->next=ptr->next->next;
	  }
	  else ptr=ptr->next;
	}
	return head;
    }
};

REMARK:
1. probably the easiest problem.
Idea: use a pointer to walk through the list.
2. Time complexity: O(n)